#配置数据源
spring:
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST:10.211.55.145}:${DB_PORT:3306}/${DB_NAME:unicorn}
    username: ${DB_USER:}
    password: ${DB_PWD:}

    hikari:
      ############################################################
      # This property controls the default auto-commit behavior of connections returned from the pool. It is a boolean value. Default: true
      auto-commit: true
      # This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool.Default: 30000 (30 seconds)
      connection-timeout: 30000
      # This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
      # This setting only applies when minimumIdle is defined to be less than maximumPoolSize. Default: 600000 (10 minutes)
      idle-timeout: 600000
      # This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed will it then be removed.
      # it should be several seconds shorter than any database or infrastructure imposed connection time limit，Default: 1800000 (30 minutes)（show variables like '%timeout%';） -->
      max-lifetime: 28740000
      # we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool. Default: same as maximumPoolSize
      # minimum-idle: 5
      # When the pool reaches this size, and no idle connections are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out. Please read about pool sizing. Default: 10
      maximum-pool-size: 10
      pool-name: Unicorn-CCP
      connection-test-query: SELECT 1


  # cache配置
  cache:
    type: redis
  # redis配置
  redis:
    #详细版的redisson配置可参考：https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter
    # Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379
    #    url: redis://10.211.55.140:6379
    #    timeout: 2000 # 连接或读取超时时长（毫秒）
    #    database: 0
    redisson:
      config: |
        singleServerConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 3000
          retryAttempts: 3
          retryInterval: 1500
          password: redis-psd
          subscriptionsPerConnection: 5
          clientName: null
          address: redis://10.211.55.145:6379
          subscriptionConnectionMinimumIdleSize: 2
          subscriptionConnectionPoolSize: 8
          connectionMinimumIdleSize: 4
          connectionPoolSize: 8
          database: 6
          dnsMonitoringInterval: 5000
        codec: !<org.redisson.codec.JsonJacksonCodec> { }
        "transportMode": "NIO"

  ##### RabbitMQ ####
  rabbitmq:
    #    RabbitMQ集群，通过addresses配置，多个以逗号分隔(优先取addresses，然后再取host)
    addresses: 10.211.55.145:5672
    #    host: 10.211.55.140 # rabbitmq的连接地址
    #    port: 5672 # rabbitmq的连接端口号
    virtual-host: /unicorn # rabbitmq的虚拟host
    username: admin # rabbitmq的用户名
    password: admin # rabbitmq的密码
    ####开始消费最大重试次数，避免一直重复消费的问题
    listener:
      simple:
        concurrency: 1 # Minimum number of consumers.
        max-concurrency: 20 # Maximum number of consumers.
        prefetch: 50
        default-requeue-rejected: true #意思是，消息被拒后（即未消费），重新（true）放入队列
        retry:
          enabled: true #是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
          max-attempts: 3 #最大重试次数
          initial-interval: 5000ms
  ##### 邮箱配置
  mail:
    host: smtp.office365.com #SMTP server host
    username: xxx@outlook.com #login user
    password: xxx #login password
    properties:
      mail.smtp.auth: true
      mail.smtp.timeout: 25000
      mail.smtp.starttls.enable: true
      to-dev: xxx@github.com #信息默认接收人（邮箱）

  servlet:
    multipart:
      max-file-size: 20MB #限制单个文件大小
      max-request-size: 50MB #限制请求总量

#jwt
jwt:
  #  header: Authorization
  # 令牌前缀
  #  token-start-with: Bearer
  # 必须使用最少88位的Base64对该令牌进行编码
  base64-secret: ZmQ0ZGI5NjQ0MDQwY2I4MjMxY2Y3ZmI3MjdhN2ZmMjNhODViOTg1ZGE0NTBjMGM4NDA5NzYxMjdjOWMwYWRmZTBlZjlhNGY3ZTg4Y2U3YTE1ODVkZDU5Y2Y3OGYwZWE1NzUzNWQ2YjFjZDc0NGMxZWU2MmQ3MjY1NzJmNTE0MzI=
  # 令牌过期时间 此处单位/秒 ，默认2小时，可在此网站生成 https://www.convertworld.com/zh-hans/time/milliseconds.html
#  token-validity-in-seconds: 7200

# IP 本地解析
ip:
  local-parsing: false

#是否允许生成代码，生产环境设置为false
generator:
  enabled: false

# ===== SpringDoc配置 ===== #
springdoc:
  api-docs:
    # enabled the /v3/api-docs endpoint
    enabled: false

# 滑动验证码
aj:
  captcha:
    cache-type: redis

# 文件存储路径
file:
  mac:
    path: ~/file/
    avatar: ~/avatar/
  linux:
    path: /home/eladmin/file/
    avatar: /home/eladmin/avatar/
  windows:
    path: C:\eladmin\file\
    avatar: C:\eladmin\avatar\
  # 文件大小 /M
  maxSize: 100
  avatarMaxSize: 5

# cos配置（配合3rd-tools）
aws:
  cos:
    accessKeyId: accessKey
    secretAccessKey: accessSecret
    bucketName: S3BucketName
    region: S3Region
web:
  cors-config:
    white-list:
      - https://*.lwohvye.com
      - https://xxx.com
      - http://localhost:[*]
