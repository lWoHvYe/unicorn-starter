<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~    Copyright (c) 2022-2023.  lWoHvYe(Hongyan Wang)
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0-M2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>unicorn-starter</artifactId>
    <name>Common Starter</name>

    <properties>
        <java.version>21</java.version>
        <project.core.version>4.2.0-pi-Beta</project.core.version>
        <maven.compiler.release>21</maven.compiler.release>
        <lombok.version>1.18.28</lombok.version>
        <mapstruct.version>1.5.5.Final</mapstruct.version>
        <javassist.version>3.29.2-GA</javassist.version>
        <shardingsphere.version>5.4.0</shardingsphere.version>
        <snakeyaml.version>1.33</snakeyaml.version>
        <kotlin.version>1.9.20-Beta</kotlin.version>
        <kotlin-coroutines.version>1.7.3</kotlin-coroutines.version>
    </properties>

    <dependencies>
        <!--    system模块    -->
        <dependency>
            <groupId>com.lwohvye</groupId>
            <artifactId>unicorn-security</artifactId>
            <version>${project.core.version}</version>
        </dependency>
        <!--   logging模块     -->
        <dependency>
            <groupId>com.lwohvye</groupId>
            <artifactId>unicorn-logging</artifactId>
            <version>${project.core.version}</version>
        </dependency>
        <!--   tools模块     -->
        <dependency>
            <groupId>com.lwohvye</groupId>
            <artifactId>unicorn-tp-tools-kotlin</artifactId>
            <version>${project.core.version}</version>
        </dependency>
        <!-- 代码生成模块 -->
        <dependency>
            <groupId>com.lwohvye</groupId>
            <artifactId>unicorn-code-gen-kotlin</artifactId>
            <version>${project.core.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lwohvye</groupId>
            <artifactId>virtual-threads</artifactId>
            <version>${project.core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--lombok插件-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!--mapStruct依赖-->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>${javassist.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jol</groupId>
            <artifactId>jol-core</artifactId>
            <version>0.17</version>
            <scope>provided</scope>
        </dependency>
        <!--Mockito's inline mock maker supports static mocks based on the Instrumentation API.
        You can simply enable this mock mode, by placing the 'mockito-inline' artifact where you are currently using 'mockito-core'.
        Note that Mockito's inline mock maker is not supported on Android.-->
        <!-- <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
            <scope>test</scope>
        </dependency> -->
        <!--   kotlin is optional     -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib-jdk8</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-jdk8</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-jdk9</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test</artifactId>
            <version>${kotlin.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <!-- 本地开发环境 -->
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
                <!--                <modifier></modifier>-->
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>       <!-- 默认的，不加参数时执行这个profile -->
            </activation>
        </profile>
        <!--    未来的Jigsaw. profile中可以配置dependency, build/plugin这些，在active相关的profile后，可以在Idea Run中使用相关依赖，这里不active就是单表模式，active后会使用sharding-sphere分库分表    -->
        <profile>
            <id>jigsaw</id>
            <properties>
                <profiles.active>prod</profiles.active>
                <modifier>-prod</modifier>
            </properties>
            <dependencies>
                <!--分库分表中间件-->
                <dependency>
                    <groupId>org.apache.shardingsphere</groupId>
                    <artifactId>shardingsphere-jdbc-core</artifactId>
                    <version>${shardingsphere.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jaxb</groupId>
                    <artifactId>jaxb-runtime</artifactId>
                    <version>2.3.8</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <includes>
                                <!-- 不存在的include引用，相当于排除所有maven依赖jar，没有任何三方jar文件打入输出jar -->
                                <include>
                                    <groupId>nothing</groupId>
                                    <artifactId>nothing</artifactId>
                                </include>
                            </includes>
                            <layout>ZIP</layout>
                        </configuration>
                        <executions>
                            <execution>
                                <id>repackage</id>
                            </execution>
                        </executions>
                    </plugin>
                    <!--maven-jar-plugin:   jar: Package config missing from ModulePackages class file attribute;  Could not create modular JAR file. The JDK jar tool exited with 1-->
                    <!-- jar包内剔除所有配置文件 -->
                    <plugin>
                        <artifactId>maven-jar-plugin</artifactId>
                        <configuration>
                            <!--   https://maven.apache.org/plugins/maven-jar-plugin/usage.html   -->
                            <!--   https://maven.apache.org/shared/maven-archiver/examples/classpath.html   -->
                            <archive>
                                <manifest>
                                    <addClasspath>true</addClasspath>
                                </manifest>
                            </archive>
                            <!--不打入jar包的文件类型或者路径-->
                            <!--<excludes>-->
                            <!--    <exclude>config/**</exclude>-->
                            <!--</excludes>-->
                        </configuration>
                    </plugin>
                    <!-- 拷贝项目所有依赖jar文件到构建lib目录下 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-dependencies</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                    <excludeTransitive>false</excludeTransitive>
                                    <stripVersion>false</stripVersion>
                                    <silent>true</silent>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <!-- 打包 -->
    <build>
        <plugins>
            <!-- Spring Boot模块jar构建 https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#packaging.examples.custom-classifier -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <!--这样打出的jar有两个，一个是没把sb相关打进去的.jar和一个打进去的exec.jar，如果是作为被引用的模块的话，可以这样配置-->
                        <!--<configuration>
                            <classifier>exec</classifier>
                        </configuration>-->
                    </execution>
                </executions>
            </plugin>
            <!-- 跳过单元测试 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <!-- 复制指定配置文件到指定目录 -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>src/main/resources/config</directory>
                                    <includes>
                                        <include>application.yml</include>
                                        <include>application-${profiles.active}.yml</include>
                                    </includes>
                                </resource>
                            </resources>
                            <outputDirectory>${project.build.directory}/config</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- 解决 Java-16下 lombok报错：
            Fatal error compiling: java.lang.IllegalAccessError: class lombok.javac.apt.LombokProcessor (in unnamed module @0x486bcaa) cannot access class com.sun.tools.javac.processing.JavacProcessingEnvironment (in module jdk.compiler) because module jdk.compiler does not export com.sun.tools.javac.processing to unnamed module @0x486bcaa
            -->
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <source>src/main/java</source>
                                <source>target/generated-sources/annotations</source>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jvmTarget>${maven.compiler.release}</jvmTarget>
                </configuration>
            </plugin>
            <plugin>
                <!-- 这里主要为lombok和mapstruct的配置。 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>testCompile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <!--for lombok annotations to resolve-->
                    <!--contradictory to maven, intelliJ fails with this-->
                    <annotationProcessorPaths>
                        <!--4lombok-->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <!-- Support for Java 16
                            https://github.com/rzwitserloot/lombok/issues/2681#
                            -->
                            <version>${lombok.version}</version>
                        </path>
                        <!--4mapstruct-->
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <url>https://repo.spring.io/milestone</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
